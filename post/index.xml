<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jeffail</title>
    <link>//www.jeffail.uk/post/</link>
    <description>Recent content in Posts on Jeffail</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 27 May 2019 12:00:01 +0000</lastBuildDate>
    
	<atom:link href="//www.jeffail.uk/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Compiling Benthos to Web Assembly</title>
      <link>//www.jeffail.uk/post/compiling-benthos-to-wasm/</link>
      <pubDate>Mon, 27 May 2019 12:00:01 +0000</pubDate>
      
      <guid>//www.jeffail.uk/post/compiling-benthos-to-wasm/</guid>
      <description>Web assembly won&amp;rsquo;t fix seasons 7 and 8, but it&amp;rsquo;s still pretty cool. At a Meltwater hackathon I had a project in mind (details soon to follow) that would benefit hugely from Benthos components running directly in the browser. I therefore set out to compile it in wasm, this is my short and sweet journey.
The Build The first thing I did and the first thing you ought to do if you are targeting wasm yourself is skim through this section of the Go wiki.</description>
    </item>
    
    <item>
      <title>This Is Now a Benthos Blog</title>
      <link>//www.jeffail.uk/post/this-is-now-a-benthos-blog/</link>
      <pubDate>Mon, 27 May 2019 12:00:00 +0000</pubDate>
      
      <guid>//www.jeffail.uk/post/this-is-now-a-benthos-blog/</guid>
      <description>As Benthos matures I&amp;rsquo;m increasingly in need of a blog site for announcing and/or justifying my otherwise inexplicable decisions in a textual medium.
Since this blog is mostly stale due to my commitments to Benthos - or, rather, I have a shinier toy to play with than this site - I think it makes sense for me to merge the two together.
&amp;ldquo;Why not ditch this trash blog and focus on a pure Benthos blog?</description>
    </item>
    
    <item>
      <title>Bland Platforms: Message Reliability</title>
      <link>//www.jeffail.uk/post/bland-platforms-message-reliability/</link>
      <pubDate>Sat, 09 Dec 2017 13:48:00 +0000</pubDate>
      
      <guid>//www.jeffail.uk/post/bland-platforms-message-reliability/</guid>
      <description>I like platforms capable of going about their lives without ever getting me involved, like a good friend. Part of building a bland platform is making sure the messaging transports are incident free. I can&amp;rsquo;t hold eye contact with my scrum master, but that doesn&amp;rsquo;t mean my platform designs should also have communication issues. This blog is an exploration into identifying and mitigating potential flaws in a platform architecture with respect to message transports.</description>
    </item>
    
    <item>
      <title>Intro to Benthos</title>
      <link>//www.jeffail.uk/post/intro-to-benthos/</link>
      <pubDate>Mon, 17 Oct 2016 20:09:45 +0100</pubDate>
      
      <guid>//www.jeffail.uk/post/intro-to-benthos/</guid>
      <description>UPDATE: I&amp;rsquo;ve battered and bruised Benthos a lot since this post, leaving it warped far beyond what is described here. For a more up to date overview check out the website at https://www.benthos.dev/.
Benthos is a persistent data streaming service, capable of connecting with a range of messaging protocols as a bridge. Protocols include Kafka, ZeroMQ, AMQP (RabbitMQ), Scalability Protocols (Nanomsg), File, HTTP 1.1 and stdin/stdout. The persistent buffer is optional, and uses memory-mapped files as a low-latency solution.</description>
    </item>
    
    <item>
      <title>FOSS: What Will the Community Do to Me?</title>
      <link>//www.jeffail.uk/post/foss-guide/</link>
      <pubDate>Fri, 07 Oct 2016 19:17:00 +0000</pubDate>
      
      <guid>//www.jeffail.uk/post/foss-guide/</guid>
      <description>Open source is a great way to mildly annoy Hacker News, but sometimes accidentally gives value to someone. With permission from my work here is an edited version of a FOSS guide I wrote. You will find an overview of what to expect from open sourcing your projects, along with some good practices. This was originally intended for teams, but mostly also applies for individuals and hobby projects.
Most of the advice here will be common sense, as they are good practices in general.</description>
    </item>
    
    <item>
      <title>Golang Service Configuration</title>
      <link>//www.jeffail.uk/post/golang-config/</link>
      <pubDate>Wed, 07 Jan 2015 12:00:00 +0000</pubDate>
      
      <guid>//www.jeffail.uk/post/golang-config/</guid>
      <description>&lt;p&gt;Rob Pike wrote an interesting blog about API options, it can be found &lt;a href=&#34;http://commandcenter.blogspot.nl/2014/01/self-referential-functions-and-design.html&#34;&gt;here&lt;/a&gt;. It&amp;rsquo;s worth a read, but the summary is that it&amp;rsquo;s a damn fine idea to design options as a variadic argument of configuring functors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Teaching Teens to Tech</title>
      <link>//www.jeffail.uk/post/teaching-teens/</link>
      <pubDate>Mon, 28 Apr 2014 12:00:00 +0000</pubDate>
      
      <guid>//www.jeffail.uk/post/teaching-teens/</guid>
      <description>&lt;p&gt;Teenagers are pretty much all losers. Teaching them how to write software is a mere drop in their vast ocean of ignorance, but it is a noble cause that works well to remind us real people that we are better than they are because we can do cool stuff that they cannot.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>